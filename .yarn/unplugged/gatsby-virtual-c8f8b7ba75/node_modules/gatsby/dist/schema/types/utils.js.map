{"version":3,"file":"utils.js","names":["SEARCHABLE_ENUM","SEARCHABLE","NOT_SEARCHABLE","DEPRECATED_SEARCHABLE","removeEmptyFields","inputTypeComposer","cache","Set","convert","itc","has","add","fields","getFields","nonEmptyFields","Object","keys","forEach","fieldName","fieldITC","type","InputTypeComposer","convertedITC","getFieldNames","length","setFields","schemaComposer","typeComposer","preCreatedInputComposer","deprecationReason","postfix","onEnter","leafInputComposer","listInputComposer","inputTypeName","getTypeName","replace","addDerivedType","derivedTypeName","getITC","GraphQLInputObjectType","name","fieldNames","convertedFields","maybeContext","fieldConfig","getFieldConfig","getNamedType","getAnyTC","operatorsInputTC","isListType","getNullableType","GraphQLList","operatorFields","addFields","convertToNestedInputType","typeName","getOrCreateITC","getInputTypeComposer","fallbackType","hasField","getFieldType","extendField","filterInputTC"],"sources":["../../../src/schema/types/utils.ts"],"sourcesContent":["import {\n  getNamedType,\n  getNullableType,\n  GraphQLInputObjectType,\n  GraphQLEnumType,\n  GraphQLList,\n  GraphQLScalarType,\n} from \"graphql\"\nimport { addDerivedType } from \"./derived-types\"\nimport {\n  InputTypeComposer,\n  SchemaComposer,\n  ObjectTypeComposer,\n  EnumTypeComposer,\n  InterfaceTypeComposer,\n  UnionTypeComposer,\n  ScalarTypeComposer,\n  NonNullComposer,\n} from \"graphql-compose\"\n\ntype Context = any\n\ntype AnyComposeType<TContext> =\n  | ObjectTypeComposer<any, TContext>\n  | InputTypeComposer<TContext>\n  | EnumTypeComposer<TContext>\n  | InterfaceTypeComposer<any, TContext>\n  | UnionTypeComposer<any, TContext>\n  | ScalarTypeComposer<TContext>\n\nexport const SEARCHABLE_ENUM = {\n  SEARCHABLE: `SEARCHABLE`,\n  NOT_SEARCHABLE: `NON_SEARCHABLE`,\n  DEPRECATED_SEARCHABLE: `DERPECATED_SEARCHABLE`,\n} as const\n\nconst removeEmptyFields = (\n  { inputTypeComposer }: { inputTypeComposer: InputTypeComposer },\n  cache = new Set()\n): InputTypeComposer => {\n  const convert = (itc: InputTypeComposer): InputTypeComposer => {\n    if (cache.has(itc)) {\n      return itc\n    }\n    cache.add(itc)\n    const fields = itc.getFields()\n    const nonEmptyFields = {}\n    Object.keys(fields).forEach(fieldName => {\n      const fieldITC = fields[fieldName].type\n      if (fieldITC instanceof InputTypeComposer) {\n        const convertedITC = convert(fieldITC)\n        if (convertedITC.getFieldNames().length) {\n          nonEmptyFields[fieldName] = convertedITC\n        }\n      } else {\n        nonEmptyFields[fieldName] = fieldITC\n      }\n    })\n    itc.setFields(nonEmptyFields)\n    return itc\n  }\n  return convert(inputTypeComposer)\n}\n\nexport type IVisitContext =\n  | {\n      deprecationReason?: string\n    }\n  | undefined\n  | null\n\nexport type OnEnter = (visitorContext: {\n  fieldName: string\n  typeComposer: AnyComposeType<Context>\n}) => IVisitContext\n\nexport type LeafInput =\n  | InputTypeComposer<Context>\n  | NonNullComposer<InputTypeComposer<Context>>\n  | ((arg: {\n      type: GraphQLScalarType | GraphQLEnumType\n      schemaComposer: SchemaComposer<Context>\n    }) => InputTypeComposer<Context>)\n  | EnumTypeComposer<Context>\n  | NonNullComposer<EnumTypeComposer<Context>>\n\nexport type ListInput = (arg: {\n  inputTypeComposer: InputTypeComposer\n  schemaComposer: SchemaComposer<Context>\n}) => InputTypeComposer<Context>\n\nconst convert = ({\n  schemaComposer,\n  typeComposer,\n  inputTypeComposer,\n  preCreatedInputComposer,\n  deprecationReason,\n  postfix,\n  onEnter,\n  leafInputComposer,\n  listInputComposer,\n}: {\n  schemaComposer: SchemaComposer<Context>\n  typeComposer: AnyComposeType<Context>\n  inputTypeComposer: InputTypeComposer<Context>\n  preCreatedInputComposer?: InputTypeComposer<Context>\n  deprecationReason?: any\n  postfix: string\n  onEnter: OnEnter\n  leafInputComposer: LeafInput\n  listInputComposer?: ListInput\n}): InputTypeComposer<Context> => {\n  const inputTypeName = inputTypeComposer\n    .getTypeName()\n    .replace(/Input$/, postfix)\n\n  addDerivedType({ typeComposer, derivedTypeName: inputTypeName })\n\n  let convertedITC\n  if (preCreatedInputComposer) {\n    convertedITC = preCreatedInputComposer\n  } else if (schemaComposer.has(inputTypeName)) {\n    return schemaComposer.getITC(inputTypeName)\n  } else {\n    convertedITC = new InputTypeComposer(\n      new GraphQLInputObjectType({\n        name: inputTypeName,\n        fields: {},\n      }),\n      schemaComposer\n    )\n  }\n\n  schemaComposer.add(convertedITC)\n\n  const fieldNames = inputTypeComposer.getFieldNames()\n  const convertedFields = {}\n  fieldNames.forEach(fieldName => {\n    const maybeContext = onEnter({\n      fieldName,\n      typeComposer,\n    })\n\n    if (maybeContext === null) {\n      return\n    }\n\n    const fieldConfig = inputTypeComposer.getFieldConfig(fieldName)\n    const type = getNamedType(fieldConfig.type)\n\n    if (type instanceof GraphQLInputObjectType) {\n      // Input type composers has names `FooInput`, get the type associated\n      // with it\n      const typeComposer = schemaComposer.getAnyTC(\n        type.name.replace(/Input$/, ``)\n      )\n      const itc = new InputTypeComposer(type, schemaComposer)\n\n      const operatorsInputTC = convert({\n        schemaComposer,\n        typeComposer,\n        inputTypeComposer: itc,\n        deprecationReason: maybeContext?.deprecationReason ?? deprecationReason,\n        postfix,\n        onEnter,\n        leafInputComposer,\n        listInputComposer,\n      })\n\n      // TODO: array of arrays?\n      const isListType =\n        getNullableType(fieldConfig.type) instanceof GraphQLList\n\n      convertedFields[fieldName] = isListType\n        ? typeof listInputComposer === `function`\n          ? listInputComposer({\n              schemaComposer,\n              inputTypeComposer: operatorsInputTC,\n            })\n          : operatorsInputTC\n        : operatorsInputTC\n    } else {\n      // GraphQLScalarType || GraphQLEnumType\n      const operatorFields =\n        typeof leafInputComposer === `function`\n          ? leafInputComposer({ schemaComposer, type })\n          : leafInputComposer\n      if (operatorFields) {\n        convertedFields[fieldName] = operatorFields\n      }\n    }\n\n    if (convertedFields[fieldName]) {\n      convertedFields[fieldName].deprecationReason = deprecationReason\n    }\n  })\n\n  convertedITC.addFields(convertedFields)\n  return convertedITC\n}\n\nexport const convertToNestedInputType = ({\n  schemaComposer,\n  typeComposer,\n  postfix,\n  onEnter,\n  leafInputComposer,\n  listInputComposer,\n}: {\n  schemaComposer: SchemaComposer<Context>\n  typeComposer: ObjectTypeComposer<Context> | InterfaceTypeComposer<Context>\n  postfix: string\n  onEnter: OnEnter\n  leafInputComposer: LeafInput\n  listInputComposer?: ListInput\n}): InputTypeComposer => {\n  const typeName = typeComposer.getTypeName()\n  const preCreatedInputComposer = schemaComposer.getOrCreateITC(\n    `${typeName}${postfix}`\n  )\n  const inputTypeComposer = typeComposer.getInputTypeComposer({\n    fallbackType: null,\n  })\n\n  if (\n    inputTypeComposer?.hasField(`id`) &&\n    getNamedType(inputTypeComposer.getFieldType(`id`)).name === `ID`\n  ) {\n    inputTypeComposer.extendField(`id`, { type: `String` })\n  }\n\n  const filterInputTC = convert({\n    schemaComposer,\n    typeComposer,\n    inputTypeComposer,\n    preCreatedInputComposer,\n    postfix,\n    onEnter,\n    leafInputComposer,\n    listInputComposer,\n  })\n\n  return removeEmptyFields({ inputTypeComposer: filterInputTC })\n}\n"],"mappings":"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"}