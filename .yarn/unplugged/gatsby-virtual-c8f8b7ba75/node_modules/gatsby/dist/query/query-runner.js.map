{"version":3,"file":"query-runner.js","names":["resultHashCache","getResultHashCache","GatsbyCacheLmdb","name","encoding","init","reportLongRunningQueryJob","queryJob","messageParts","componentPath","isPage","path","context","push","JSON","stringify","report","warn","join","panicQueryJobError","errors","urlPath","undefined","queryContext","plugin","pluginCreatorId","queryType","structuredErrors","map","e","structuredError","errorParser","message","filePath","location","error","codeFrame","getCodeFrame","query","locations","line","column","panicOnBuild","startQueryJob","graphqlRunner","parentSpan","isPending","timeoutId","setTimeout","queryName","id","finally","clearTimeout","queryRunner","program","store","getState","dispatch","actions","queryStart","result","Object","assign","pageContext","internalComponentName","component","componentChunkName","updatedAt","pluginCreator___NODE","isCreatedByStatefulCreatePages","matchPath","mode","slices","resultJSON","resultHash","crypto","createHash","update","digest","resultHashCacheKey","hash","get","pageDataExists","directory","set","savePageQueryResult","type","payload","substring","resultPath","fs","outputFile","pageQueryRun","queryHash"],"sources":["../../src/query/query-runner.ts"],"sourcesContent":["import { Span } from \"opentracing\"\nimport _ from \"lodash\"\nimport fs from \"fs-extra\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport crypto from \"crypto\"\nimport { ExecutionResult, GraphQLError } from \"graphql\"\n\nimport path from \"path\"\nimport { store } from \"../redux\"\nimport { actions } from \"../redux/actions\"\nimport { getCodeFrame } from \"./graphql-errors-codeframe\"\nimport errorParser from \"./error-parser\"\n\nimport { GraphQLRunner } from \"./graphql-runner\"\nimport { IExecutionResult, PageContext } from \"./types\"\nimport { pageDataExists, savePageQueryResult } from \"../utils/page-data\"\nimport GatsbyCacheLmdb from \"../utils/cache-lmdb\"\n\nlet resultHashCache: GatsbyCacheLmdb | undefined\nfunction getResultHashCache(): GatsbyCacheLmdb {\n  if (!resultHashCache) {\n    resultHashCache = new GatsbyCacheLmdb({\n      name: `query-result-hashes`,\n      encoding: `string`,\n    }).init()\n  }\n  return resultHashCache\n}\n\nexport interface IQueryJob {\n  id: string\n  hash?: string\n  query: string\n  componentPath: string\n  context: PageContext\n  queryType: \"page\" | \"static\" | \"slice\"\n  pluginCreatorId?: string\n}\n\nfunction reportLongRunningQueryJob(queryJob): void {\n  const messageParts = [\n    `This query took more than 15s to run â€” which is unusually long and might indicate you're querying too much or have some unoptimized code:`,\n    `File path: ${queryJob.componentPath}`,\n  ]\n\n  if (queryJob.isPage) {\n    const { path, context } = queryJob.context\n    messageParts.push(`URL path: ${path}`)\n\n    if (!_.isEmpty(context)) {\n      messageParts.push(`Context: ${JSON.stringify(context, null, 4)}`)\n    }\n  }\n\n  report.warn(messageParts.join(`\\n`))\n}\n\nfunction panicQueryJobError(\n  queryJob: IQueryJob,\n  errors: ReadonlyArray<GraphQLError>\n): void {\n  let urlPath = undefined\n  let queryContext = {}\n  const plugin = queryJob.pluginCreatorId || `none`\n\n  if (queryJob.queryType === `page`) {\n    urlPath = queryJob.context.path\n    queryContext = queryJob.context.context\n  }\n\n  const structuredErrors = errors.map(e => {\n    const structuredError = errorParser({\n      message: e.message,\n      filePath: undefined,\n      location: undefined,\n      error: e,\n    })\n\n    structuredError.context = {\n      ...structuredError.context,\n      codeFrame: getCodeFrame(\n        queryJob.query,\n        e.locations && e.locations[0].line,\n        e.locations && e.locations[0].column\n      ),\n      filePath: queryJob.componentPath,\n      ...(urlPath ? { urlPath } : {}),\n      ...queryContext,\n      plugin,\n    }\n\n    return structuredError\n  })\n\n  report.panicOnBuild(structuredErrors)\n}\n\nasync function startQueryJob(\n  graphqlRunner: GraphQLRunner,\n  queryJob: IQueryJob,\n  parentSpan: Span | undefined\n): Promise<ExecutionResult> {\n  let isPending = true\n\n  // Print out warning when query takes too long\n  const timeoutId = setTimeout(() => {\n    if (isPending) {\n      reportLongRunningQueryJob(queryJob)\n    }\n  }, 15000)\n\n  return graphqlRunner\n    .query(queryJob.query, queryJob.context, {\n      parentSpan,\n      queryName: queryJob.id,\n      componentPath: queryJob.componentPath,\n    })\n    .finally(() => {\n      isPending = false\n      clearTimeout(timeoutId)\n    })\n}\n\nexport async function queryRunner(\n  graphqlRunner: GraphQLRunner,\n  queryJob: IQueryJob,\n  parentSpan: Span | undefined\n): Promise<IExecutionResult> {\n  const { program } = store.getState()\n\n  store.dispatch(\n    actions.queryStart({\n      path: queryJob.id,\n      componentPath: queryJob.componentPath,\n      isPage: queryJob.queryType === `page`,\n    })\n  )\n\n  // Run query\n  let result: IExecutionResult\n  // Nothing to do if the query doesn't exist.\n  if (!queryJob.query || queryJob.query === ``) {\n    result = {}\n  } else {\n    result = await startQueryJob(graphqlRunner, queryJob, parentSpan)\n  }\n\n  if (result.errors) {\n    // If there's a graphql error then log the error and exit\n    panicQueryJobError(queryJob, result.errors)\n  }\n\n  // Add the page/slice context onto the results.\n  if (queryJob) {\n    if (queryJob.queryType === `page`) {\n      result[`pageContext`] = Object.assign({}, queryJob.context)\n    } else if (queryJob.queryType === `slice`) {\n      result[`sliceContext`] = Object.assign({}, queryJob.context)\n    }\n  }\n\n  // Delete internal data from pageContext\n  if (result.pageContext) {\n    delete result.pageContext.path\n    delete result.pageContext.internalComponentName\n    delete result.pageContext.component\n    delete result.pageContext.componentChunkName\n    delete result.pageContext.updatedAt\n    delete result.pageContext.pluginCreator___NODE\n    delete result.pageContext.pluginCreatorId\n    delete result.pageContext.componentPath\n    delete result.pageContext.context\n    delete result.pageContext.isCreatedByStatefulCreatePages\n    delete result.pageContext.matchPath\n    delete result.pageContext.mode\n    delete result.pageContext.slices\n  }\n\n  const resultJSON = JSON.stringify(result)\n  const resultHash = crypto\n    .createHash(`sha1`)\n    .update(resultJSON)\n    .digest(`base64`)\n\n  const resultHashCache = getResultHashCache()\n\n  let resultHashCacheKey = queryJob.id\n  if (queryJob.queryType === `static`) {\n    // For static queries we use hash for a file path we output results to.\n    // With automatic sort and aggregation graphql codemod it is possible\n    // to have same result, but different query text hashes which would skip\n    // writing out file to disk if we don't check query hash as well\n    resultHashCacheKey += `-${queryJob.hash}`\n  }\n\n  if (\n    resultHash !== (await resultHashCache.get(resultHashCacheKey)) ||\n    (queryJob.queryType === `page` &&\n      !pageDataExists(path.join(program.directory, `public`), queryJob.id))\n  ) {\n    await resultHashCache.set(resultHashCacheKey, resultHash)\n\n    if (queryJob.queryType === `page` || queryJob.queryType === `slice`) {\n      // We need to save this temporarily in cache because\n      // this might be incomplete at the moment\n      await savePageQueryResult(queryJob.id, resultJSON)\n      if (queryJob.queryType === `page`) {\n        store.dispatch({\n          type: `ADD_PENDING_PAGE_DATA_WRITE`,\n          payload: {\n            path: queryJob.id,\n          },\n        })\n      } else if (queryJob.queryType === `slice`) {\n        store.dispatch({\n          type: `ADD_PENDING_SLICE_DATA_WRITE`,\n          payload: {\n            name: queryJob.id.substring(7), // remove \"slice--\" prefix\n          },\n        })\n      }\n    } else if (queryJob.queryType === `static`) {\n      const resultPath = path.join(\n        program.directory,\n        `public`,\n        `page-data`,\n        `sq`,\n        `d`,\n        `${queryJob.hash}.json`\n      )\n      await fs.outputFile(resultPath, resultJSON)\n    }\n  }\n\n  // Broadcast that a page's query has run.\n  store.dispatch(\n    actions.pageQueryRun({\n      path: queryJob.id,\n      componentPath: queryJob.componentPath,\n      queryType: queryJob.queryType,\n      resultHash,\n      queryHash: queryJob.hash,\n    })\n  )\n\n  return result\n}\n"],"mappings":"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"}