{"version":3,"file":"graphql-runner.js","names":["_rootNodeMap","WeakMap","_trackedRootNodes","WeakSet","GraphQLRunner","constructor","store","collectStats","graphqlTracing","schema","schemaCustomization","getState","nodeModel","LocalNodeModel","schemaComposer","composer","createPageDependency","parseCache","Map","validDocuments","scheduleClearCache","clearCache","bind","stats","totalQueries","uniqueOperations","Set","uniqueQueries","totalRunQuery","totalPluralRunQuery","totalIndexHits","totalSiftHits","totalNonSingleFilters","comparatorsUsed","uniqueFilterPaths","uniqueSorts","clear","parse","query","has","set","get","validate","originalQueryText","document","originalDocument","errors","warnings","validatedDocument","NoDeprecatedCustomRule","length","ast","transformedDocument","hasChanged","tranformDocument","reporter","warn","stripIndent","print","getStats","comparatorsUsedObj","forEach","value","key","push","comparator","amount","size","context","parentSpan","queryName","componentPath","forceGraphqlTracing","telemetryResolverTimings","queryText","body","add","crypto","createHash","update","digest","err","message","tracer","GraphQLSpanTracer","tags","start","execute","rootValue","contextValue","withResolverContext","customContext","variableValues","end"],"sources":["../../src/query/graphql-runner.ts"],"sourcesContent":["import crypto from \"crypto\"\nimport { Span } from \"opentracing\"\nimport {\n  parse,\n  validate,\n  execute,\n  DocumentNode,\n  GraphQLSchema,\n  Source,\n  GraphQLError,\n  ExecutionResult,\n  NoDeprecatedCustomRule,\n  print,\n} from \"graphql\"\nimport { debounce } from \"lodash\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { createPageDependency } from \"../redux/actions/add-page-dependency\"\n\nimport withResolverContext from \"../schema/context\"\nimport { LocalNodeModel } from \"../schema/node-model\"\nimport { Store } from \"redux\"\nimport { IGatsbyState } from \"../redux/types\"\nimport { IGraphQLRunnerStatResults, IGraphQLRunnerStats } from \"./types\"\nimport { IGraphQLTelemetryRecord } from \"../schema/type-definitions\"\nimport GraphQLSpanTracer from \"./graphql-span-tracer\"\nimport { tranformDocument } from \"./transform-document\"\n\n// Preserve these caches across graphql instances.\nconst _rootNodeMap = new WeakMap()\nconst _trackedRootNodes = new WeakSet()\n\ntype Query = string | Source\n\nexport interface IQueryOptions {\n  parentSpan: Span | undefined\n  queryName: string\n  componentPath?: string | undefined\n  forceGraphqlTracing?: boolean\n  telemetryResolverTimings?: Array<IGraphQLTelemetryRecord>\n}\n\nexport interface IGraphQLRunnerOptions {\n  collectStats?: boolean\n  graphqlTracing?: boolean\n}\n\nexport class GraphQLRunner {\n  parseCache: Map<Query, DocumentNode>\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  nodeModel: any // TODO: convert \"../schema/node-model\" from Flow\n\n  schema: GraphQLSchema\n\n  validDocuments: WeakMap<DocumentNode, DocumentNode>\n  scheduleClearCache: () => void\n\n  stats: IGraphQLRunnerStats | null\n  graphqlTracing: boolean\n\n  constructor(\n    protected store: Store<IGatsbyState>,\n    { collectStats, graphqlTracing }: IGraphQLRunnerOptions = {}\n  ) {\n    const { schema, schemaCustomization } = this.store.getState()\n\n    this.nodeModel = new LocalNodeModel({\n      schema,\n      schemaComposer: schemaCustomization.composer,\n      createPageDependency,\n      _rootNodeMap,\n      _trackedRootNodes,\n    })\n    this.schema = schema\n    this.parseCache = new Map()\n    this.validDocuments = new WeakMap()\n    this.scheduleClearCache = debounce(this.clearCache.bind(this), 5000)\n\n    this.graphqlTracing = graphqlTracing || false\n\n    if (collectStats) {\n      this.stats = {\n        totalQueries: 0,\n        uniqueOperations: new Set(),\n        uniqueQueries: new Set(),\n        totalRunQuery: 0,\n        totalPluralRunQuery: 0,\n        totalIndexHits: 0,\n        totalSiftHits: 0,\n        totalNonSingleFilters: 0,\n        comparatorsUsed: new Map(),\n        uniqueFilterPaths: new Set(),\n        uniqueSorts: new Set(),\n      }\n    } else {\n      this.stats = null\n    }\n  }\n\n  clearCache(): void {\n    this.parseCache.clear()\n    this.validDocuments = new WeakMap()\n  }\n\n  parse(query: Query): DocumentNode {\n    if (!this.parseCache.has(query)) {\n      this.parseCache.set(query, parse(query))\n    }\n    return this.parseCache.get(query) as DocumentNode\n  }\n\n  validate(\n    schema: GraphQLSchema,\n    originalQueryText: string,\n    document: DocumentNode,\n    originalDocument: DocumentNode = document\n  ): {\n    errors: ReadonlyArray<GraphQLError>\n    warnings: ReadonlyArray<GraphQLError>\n    document: DocumentNode\n  } {\n    let errors: ReadonlyArray<GraphQLError> = []\n    let warnings: ReadonlyArray<GraphQLError> = []\n    const validatedDocument = this.validDocuments.get(document)\n    if (validatedDocument) {\n      return { errors: [], warnings: [], document: validatedDocument }\n    }\n\n    errors = validate(schema, document)\n    warnings = validate(schema, document, [NoDeprecatedCustomRule])\n\n    if (!errors.length) {\n      this.validDocuments.set(originalDocument, document)\n    } else {\n      const { ast: transformedDocument, hasChanged } =\n        tranformDocument(document)\n      if (hasChanged) {\n        const { errors, warnings, document } = this.validate(\n          schema,\n          originalQueryText,\n          transformedDocument,\n          originalDocument\n        )\n\n        if (!errors.length) {\n          reporter.warn(\n            `Deprecated syntax of sort and/or aggregation field arguments were found in your query (see https://gatsby.dev/graphql-nested-sort-and-aggregate). Query was automatically converted to a new syntax. You should update query in your code.\\n\\nCurrent query:\\n\\n${reporter.stripIndent(\n              originalQueryText\n            )}\\n\\nConverted query:\\n\\n${print(transformedDocument)}`\n          )\n        }\n\n        return { errors, warnings, document }\n      }\n    }\n\n    return { errors, warnings, document }\n  }\n\n  getStats(): IGraphQLRunnerStatResults | null {\n    if (this.stats) {\n      const comparatorsUsedObj: Array<{\n        comparator: string\n        amount: number\n      }> = []\n      this.stats.comparatorsUsed.forEach((value, key) => {\n        comparatorsUsedObj.push({ comparator: key, amount: value })\n      })\n      return {\n        totalQueries: this.stats.totalQueries,\n        uniqueOperations: this.stats.uniqueOperations.size,\n        uniqueQueries: this.stats.uniqueQueries.size,\n        totalRunQuery: this.stats.totalRunQuery,\n        totalPluralRunQuery: this.stats.totalPluralRunQuery,\n        totalIndexHits: this.stats.totalIndexHits,\n        totalSiftHits: this.stats.totalSiftHits,\n        totalNonSingleFilters: this.stats.totalNonSingleFilters,\n        comparatorsUsed: comparatorsUsedObj,\n        uniqueFilterPaths: this.stats.uniqueFilterPaths.size,\n        uniqueSorts: this.stats.uniqueSorts.size,\n      }\n    } else {\n      return null\n    }\n  }\n\n  async query(\n    query: Query,\n    context: Record<string, unknown>,\n    {\n      parentSpan,\n      queryName,\n      componentPath,\n      forceGraphqlTracing = false,\n      telemetryResolverTimings,\n    }: IQueryOptions\n  ): Promise<ExecutionResult> {\n    const { schema, schemaCustomization } = this.store.getState()\n\n    if (this.schema !== schema) {\n      this.schema = schema\n      this.clearCache()\n    }\n\n    let queryText = query\n    if (typeof queryText !== `string`) {\n      queryText = queryText.body\n    }\n\n    if (this.stats) {\n      this.stats.totalQueries++\n\n      this.stats.uniqueQueries.add(\n        crypto.createHash(`sha1`).update(queryText).digest(`hex`)\n      )\n    }\n\n    const { errors, warnings, document } = this.validate(\n      schema,\n      queryText,\n      this.parse(query)\n    )\n\n    // Queries are usually executed in batch. But after the batch is finished\n    // cache just wastes memory without much benefits.\n    // TODO: consider a better strategy for cache purging/invalidation\n    this.scheduleClearCache()\n\n    if (warnings.length > 0) {\n      // TODO: move those warnings to the caller side, e.g. query-runner.ts\n      warnings.forEach(err => {\n        const message = componentPath ? `\\nQueried in ${componentPath}` : ``\n        reporter.warn(err.message + message)\n      })\n    }\n\n    if (errors.length > 0) {\n      return { errors }\n    }\n\n    let tracer\n    if ((this.graphqlTracing || forceGraphqlTracing) && parentSpan) {\n      tracer = new GraphQLSpanTracer(`GraphQL Query`, {\n        parentSpan,\n        tags: {\n          queryName: queryName,\n        },\n      })\n\n      tracer.start()\n    }\n\n    try {\n      // `execute` will return a promise\n      return await execute({\n        schema,\n        document,\n        rootValue: context,\n        contextValue: withResolverContext({\n          schema,\n          schemaComposer: schemaCustomization.composer,\n          context,\n          customContext: schemaCustomization.context,\n          nodeModel: this.nodeModel,\n          stats: this.stats,\n          tracer,\n          telemetryResolverTimings,\n        }),\n        variableValues: context,\n      })\n    } finally {\n      if (tracer) {\n        tracer.end()\n      }\n    }\n  }\n}\n"],"mappings":"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"}