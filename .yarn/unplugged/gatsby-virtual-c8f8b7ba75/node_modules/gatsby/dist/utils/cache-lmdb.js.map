{"version":3,"file":"cache-lmdb.js","names":["cacheDbFile","process","env","NODE_ENV","FORCE_TEST_DATABASE_ID","JEST_WORKER_ID","dbPath","path","join","cwd","getAlreadyOpenedStore","globalThis","__GATSBY_OPEN_ROOT_LMDBS","Map","get","GatsbyCacheLmdb","constructor","name","encoding","directory","cache","init","fs","ensureDirSync","getStore","rootDb","open","compression","maxDbs","set","getDb","db","openDB","key","value","put","del","remove","resetCache","store","close","delete","emptyDir"],"sources":["../../src/utils/cache-lmdb.ts"],"sourcesContent":["import { open, RootDatabase, Database, DatabaseOptions } from \"lmdb\"\nimport * as fs from \"fs-extra\"\nimport * as path from \"path\"\n\n// Since the regular GatsbyCache saves to \"caches\" this should be \"caches-lmdb\"\nconst cacheDbFile =\n  process.env.NODE_ENV === `test`\n    ? `caches-lmdb-${\n        // FORCE_TEST_DATABASE_ID will be set if this gets executed in worker context\n        // when running jest tests. JEST_WORKER_ID will be set when this gets executed directly\n        // in test context (jest will use jest-worker internally).\n        process.env.FORCE_TEST_DATABASE_ID ?? process.env.JEST_WORKER_ID\n      }`\n    : `caches-lmdb`\n\nconst dbPath = path.join(process.cwd(), `.cache/${cacheDbFile}`)\n\nfunction getAlreadyOpenedStore(): RootDatabase | undefined {\n  if (!globalThis.__GATSBY_OPEN_ROOT_LMDBS) {\n    globalThis.__GATSBY_OPEN_ROOT_LMDBS = new Map()\n  }\n  return globalThis.__GATSBY_OPEN_ROOT_LMDBS.get(dbPath)\n}\n\nexport default class GatsbyCacheLmdb {\n  private db: Database | undefined\n  private encoding: DatabaseOptions[\"encoding\"]\n  public readonly name: string\n  // Needed for plugins that want to write data to the cache directory\n  public readonly directory: string\n  // TODO: remove `.cache` in v4. This is compat mode - cache-manager cache implementation\n  // expose internal cache that gives access to `.del` function that wasn't available in public\n  // cache interface (gatsby-plugin-sharp use it to clear no longer needed data)\n  public readonly cache: GatsbyCacheLmdb\n\n  constructor({\n    name = `db`,\n    encoding = `json`,\n  }: {\n    name: string\n    encoding?: DatabaseOptions[\"encoding\"]\n  }) {\n    this.name = name\n    this.encoding = encoding\n    this.directory = path.join(process.cwd(), `.cache/caches/${name}`)\n    this.cache = this\n  }\n\n  init(): GatsbyCacheLmdb {\n    fs.ensureDirSync(this.directory)\n    return this\n  }\n\n  private static getStore(): RootDatabase {\n    let rootDb = getAlreadyOpenedStore()\n    if (rootDb) {\n      return rootDb\n    }\n\n    rootDb = open({\n      name: `root`,\n      path: dbPath,\n      compression: true,\n      maxDbs: 200,\n    })\n\n    globalThis.__GATSBY_OPEN_ROOT_LMDBS.set(dbPath, rootDb)\n\n    return rootDb\n  }\n\n  private getDb(): Database {\n    if (!this.db) {\n      this.db = GatsbyCacheLmdb.getStore().openDB({\n        name: this.name,\n        encoding: this.encoding,\n      })\n    }\n    return this.db\n  }\n\n  async get<T = unknown>(key): Promise<T | undefined> {\n    return this.getDb().get(key)\n  }\n\n  async set<T>(key: string, value: T): Promise<T | undefined> {\n    await this.getDb().put(key, value)\n    return value\n  }\n\n  async del(key: string): Promise<void> {\n    return this.getDb().remove(key) as unknown as Promise<void>\n  }\n}\n\nexport async function resetCache(): Promise<void> {\n  const store = getAlreadyOpenedStore()\n  if (store) {\n    await store.close()\n    globalThis.__GATSBY_OPEN_ROOT_LMDBS.delete(dbPath)\n  }\n\n  await fs.emptyDir(dbPath)\n}\n"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA;AACA,MAAMA,WAAW,GACfC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAA0B,MAA1B,GACK,eACC;AACA;AACA;AAHF,yBAIEF,OAAO,CAACC,GAAR,CAAYE,sBAJd,yEAIwCH,OAAO,CAACC,GAAR,CAAYG,cACnD,EANL,GAOK,aARP;AAUA,MAAMC,MAAM,GAAGC,IAAI,CAACC,IAAL,CAAUP,OAAO,CAACQ,GAAR,EAAV,EAA0B,UAAST,WAAY,EAA/C,CAAf;;AAEA,SAASU,qBAAT,GAA2D;EACzD,IAAI,CAACC,UAAU,CAACC,wBAAhB,EAA0C;IACxCD,UAAU,CAACC,wBAAX,GAAsC,IAAIC,GAAJ,EAAtC;EACD;;EACD,OAAOF,UAAU,CAACC,wBAAX,CAAoCE,GAApC,CAAwCR,MAAxC,CAAP;AACD;;AAEc,MAAMS,eAAN,CAAsB;EAInC;EAEA;EACA;EACA;EAGAC,WAAW,CAAC;IACVC,IAAI,GAAI,IADE;IAEVC,QAAQ,GAAI;EAFF,CAAD,EAMR;IACD,KAAKD,IAAL,GAAYA,IAAZ;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IACA,KAAKC,SAAL,GAAiBZ,IAAI,CAACC,IAAL,CAAUP,OAAO,CAACQ,GAAR,EAAV,EAA0B,iBAAgBQ,IAAK,EAA/C,CAAjB;IACA,KAAKG,KAAL,GAAa,IAAb;EACD;;EAEDC,IAAI,GAAoB;IACtBC,EAAE,CAACC,aAAH,CAAiB,KAAKJ,SAAtB;IACA,OAAO,IAAP;EACD;;EAEsB,OAARK,QAAQ,GAAiB;IACtC,IAAIC,MAAM,GAAGf,qBAAqB,EAAlC;;IACA,IAAIe,MAAJ,EAAY;MACV,OAAOA,MAAP;IACD;;IAEDA,MAAM,GAAG,IAAAC,UAAA,EAAK;MACZT,IAAI,EAAG,MADK;MAEZV,IAAI,EAAED,MAFM;MAGZqB,WAAW,EAAE,IAHD;MAIZC,MAAM,EAAE;IAJI,CAAL,CAAT;;IAOAjB,UAAU,CAACC,wBAAX,CAAoCiB,GAApC,CAAwCvB,MAAxC,EAAgDmB,MAAhD;;IAEA,OAAOA,MAAP;EACD;;EAEOK,KAAK,GAAa;IACxB,IAAI,CAAC,KAAKC,EAAV,EAAc;MACZ,KAAKA,EAAL,GAAUhB,eAAe,CAACS,QAAhB,GAA2BQ,MAA3B,CAAkC;QAC1Cf,IAAI,EAAE,KAAKA,IAD+B;QAE1CC,QAAQ,EAAE,KAAKA;MAF2B,CAAlC,CAAV;IAID;;IACD,OAAO,KAAKa,EAAZ;EACD;;EAEQ,MAAHjB,GAAG,CAAcmB,GAAd,EAA2C;IAClD,OAAO,KAAKH,KAAL,GAAahB,GAAb,CAAiBmB,GAAjB,CAAP;EACD;;EAEQ,MAAHJ,GAAG,CAAII,GAAJ,EAAiBC,KAAjB,EAAmD;IAC1D,MAAM,KAAKJ,KAAL,GAAaK,GAAb,CAAiBF,GAAjB,EAAsBC,KAAtB,CAAN;IACA,OAAOA,KAAP;EACD;;EAEQ,MAAHE,GAAG,CAACH,GAAD,EAA6B;IACpC,OAAO,KAAKH,KAAL,GAAaO,MAAb,CAAoBJ,GAApB,CAAP;EACD;;AApEkC;;;;AAuE9B,eAAeK,UAAf,GAA2C;EAChD,MAAMC,KAAK,GAAG7B,qBAAqB,EAAnC;;EACA,IAAI6B,KAAJ,EAAW;IACT,MAAMA,KAAK,CAACC,KAAN,EAAN;;IACA7B,UAAU,CAACC,wBAAX,CAAoC6B,MAApC,CAA2CnC,MAA3C;EACD;;EAED,MAAMgB,EAAE,CAACoB,QAAH,CAAYpC,MAAZ,CAAN;AACD"}