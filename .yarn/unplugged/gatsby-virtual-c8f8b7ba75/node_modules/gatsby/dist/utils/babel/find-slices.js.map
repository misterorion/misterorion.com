{"version":3,"file":"find-slices.js","names":["SLICES_PROPS","Set","mergePreviouslyCollectedSlice","newInfo","previousInfo","name","allowEmpty","mergePreviouslyCollectedSlices","ret","info","Object","entries","collectSlices","ast","filename","result","hasResults","traverse","JSXOpeningElement","nodePath","get","referencesImport","unresolvedProps","props","getAttributeValues","prop","push","alias","length","locationInFile","node","loc","start","line","column","error","join","reporter","warn"],"sources":["../../../src/utils/babel/find-slices.ts"],"sourcesContent":["import traverse from \"@babel/traverse\"\nimport type { Node } from \"@babel/core\"\nimport { getAttributeValues } from \"babel-jsx-utils\"\nimport reporter from \"gatsby-cli/lib/reporter\"\n\nexport interface ICollectedSlice {\n  name: string\n  allowEmpty: boolean\n}\n\nexport type ICollectedSlices = Record<string, ICollectedSlice>\n\nconst SLICES_PROPS = new Set([`alias`, `allowEmpty`])\n\nfunction mergePreviouslyCollectedSlice(\n  newInfo: ICollectedSlice,\n  previousInfo?: ICollectedSlice\n): ICollectedSlice {\n  return {\n    name: newInfo.name,\n    // it's enough for one use of slice that doesn't allow empty\n    // to require passing everyhing\n    allowEmpty:\n      previousInfo?.allowEmpty === false\n        ? false\n        : previousInfo?.allowEmpty ?? newInfo.allowEmpty,\n  }\n}\n\nexport function mergePreviouslyCollectedSlices(\n  newInfo: ICollectedSlices,\n  previousInfo?: ICollectedSlices\n): ICollectedSlices {\n  const ret: ICollectedSlices = previousInfo ?? {}\n\n  for (const [name, info] of Object.entries(newInfo)) {\n    ret[name] = mergePreviouslyCollectedSlice(info, ret[name])\n  }\n\n  return ret\n}\n\nexport function collectSlices(\n  ast: Node,\n  filename: string\n): Record<string, ICollectedSlice> | null {\n  const result: Record<string, ICollectedSlice> = {}\n  let hasResults = false\n\n  traverse(ast, {\n    JSXOpeningElement(nodePath): void {\n      if (!nodePath.get(`name`).referencesImport(`gatsby`, `Slice`)) {\n        return\n      }\n\n      const unresolvedProps: Array<string> = []\n\n      const props = getAttributeValues(\n        nodePath,\n        prop => {\n          unresolvedProps.push(prop)\n        },\n        SLICES_PROPS\n      ) as { alias: string; allowEmpty?: boolean }\n\n      const { alias: name, allowEmpty = false } = props\n\n      if (unresolvedProps.length) {\n        let locationInFile = ``\n        if (nodePath.node.loc?.start?.line) {\n          locationInFile = `:${nodePath.node.loc.start.line}`\n          if (nodePath.node.loc?.start?.column) {\n            locationInFile += `:${nodePath.node.loc.start.column + 1}`\n          }\n        }\n\n        const error = `[Gatsby Slice API] Could not find values in \"${filename}${locationInFile}\" for the following props at build time: ${unresolvedProps.join(\n          `, `\n        )}`\n\n        reporter.warn(error)\n        return\n      }\n\n      if (name) {\n        result[name] = mergePreviouslyCollectedSlice(\n          { name, allowEmpty },\n          result[name]\n        )\n        hasResults = true\n      }\n    },\n  })\n\n  return hasResults ? result : null\n}\n"],"mappings":";;;;;;;;AAAA;;AAEA;;AACA;;AASA,MAAMA,YAAY,GAAG,IAAIC,GAAJ,CAAQ,CAAE,OAAF,EAAW,YAAX,CAAR,CAArB;;AAEA,SAASC,6BAAT,CACEC,OADF,EAEEC,YAFF,EAGmB;EAAA;;EACjB,OAAO;IACLC,IAAI,EAAEF,OAAO,CAACE,IADT;IAEL;IACA;IACAC,UAAU,EACR,CAAAF,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEE,UAAd,MAA6B,KAA7B,GACI,KADJ,4BAEIF,YAFJ,aAEIA,YAFJ,uBAEIA,YAAY,CAAEE,UAFlB,yEAEgCH,OAAO,CAACG;EAPrC,CAAP;AASD;;AAEM,SAASC,8BAAT,CACLJ,OADK,EAELC,YAFK,EAGa;EAClB,MAAMI,GAAqB,GAAGJ,YAAH,aAAGA,YAAH,cAAGA,YAAH,GAAmB,EAA9C;;EAEA,KAAK,MAAM,CAACC,IAAD,EAAOI,IAAP,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeR,OAAf,CAA3B,EAAoD;IAClDK,GAAG,CAACH,IAAD,CAAH,GAAYH,6BAA6B,CAACO,IAAD,EAAOD,GAAG,CAACH,IAAD,CAAV,CAAzC;EACD;;EAED,OAAOG,GAAP;AACD;;AAEM,SAASI,aAAT,CACLC,GADK,EAELC,QAFK,EAGmC;EACxC,MAAMC,MAAuC,GAAG,EAAhD;EACA,IAAIC,UAAU,GAAG,KAAjB;EAEA,IAAAC,iBAAA,EAASJ,GAAT,EAAc;IACZK,iBAAiB,CAACC,QAAD,EAAiB;MAChC,IAAI,CAACA,QAAQ,CAACC,GAAT,CAAc,MAAd,EAAqBC,gBAArB,CAAuC,QAAvC,EAAiD,OAAjD,CAAL,EAA+D;QAC7D;MACD;;MAED,MAAMC,eAA8B,GAAG,EAAvC;MAEA,MAAMC,KAAK,GAAG,IAAAC,iCAAA,EACZL,QADY,EAEZM,IAAI,IAAI;QACNH,eAAe,CAACI,IAAhB,CAAqBD,IAArB;MACD,CAJW,EAKZzB,YALY,CAAd;MAQA,MAAM;QAAE2B,KAAK,EAAEtB,IAAT;QAAeC,UAAU,GAAG;MAA5B,IAAsCiB,KAA5C;;MAEA,IAAID,eAAe,CAACM,MAApB,EAA4B;QAAA;;QAC1B,IAAIC,cAAc,GAAI,EAAtB;;QACA,0BAAIV,QAAQ,CAACW,IAAT,CAAcC,GAAlB,wEAAI,mBAAmBC,KAAvB,kDAAI,sBAA0BC,IAA9B,EAAoC;UAAA;;UAClCJ,cAAc,GAAI,IAAGV,QAAQ,CAACW,IAAT,CAAcC,GAAd,CAAkBC,KAAlB,CAAwBC,IAAK,EAAlD;;UACA,2BAAId,QAAQ,CAACW,IAAT,CAAcC,GAAlB,yEAAI,oBAAmBC,KAAvB,kDAAI,sBAA0BE,MAA9B,EAAsC;YACpCL,cAAc,IAAK,IAAGV,QAAQ,CAACW,IAAT,CAAcC,GAAd,CAAkBC,KAAlB,CAAwBE,MAAxB,GAAiC,CAAE,EAAzD;UACD;QACF;;QAED,MAAMC,KAAK,GAAI,gDAA+CrB,QAAS,GAAEe,cAAe,4CAA2CP,eAAe,CAACc,IAAhB,CAChI,IADgI,CAEjI,EAFF;;QAIAC,iBAAA,CAASC,IAAT,CAAcH,KAAd;;QACA;MACD;;MAED,IAAI9B,IAAJ,EAAU;QACRU,MAAM,CAACV,IAAD,CAAN,GAAeH,6BAA6B,CAC1C;UAAEG,IAAF;UAAQC;QAAR,CAD0C,EAE1CS,MAAM,CAACV,IAAD,CAFoC,CAA5C;QAIAW,UAAU,GAAG,IAAb;MACD;IACF;;EA1CW,CAAd;EA6CA,OAAOA,UAAU,GAAGD,MAAH,GAAY,IAA7B;AACD"}