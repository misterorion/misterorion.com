{"version":3,"file":"resolvers.js","names":["pathObjectToPathString","input","path","currentValue","leaf","undefined","isPlainObject","entries","Object","length","Error","key","value","push","join","getMaybeResolvedValue","node","field","nodeInterfaceName","fieldPathNeedToResolve","selector","type","getValueAt","getResolvedFields","findOne","typeName","findOneResolver","_source","args","context","info","stats","totalRunQuery","nodeModel","query","filter","schema","getType","tracer","maybeConvertSortInputObjectToSortPath","sort","sorts","Array","isArray","modifiedSort","fields","order","findManyPaginated","findManyPaginatedResolver","group","getProjectedField","distinct","max","min","sum","skip","Math","limit","extendedArgs","totalPluralRunQuery","result","findAll","connectionType","paginate","resultOffset","createDistinctResolver","distinctResolver","source","edges","values","Set","forEach","subValue","add","Date","toISOString","from","createMinResolver","minResolver","Number","MAX_SAFE_INTEGER","isNaN","createMaxResolver","maxResolver","MIN_SAFE_INTEGER","createSumResolver","sumResolver","reduce","prev","createGroupResolver","groupResolver","groupedResults","acc","concat","create","keys","fieldValue","GatsbyIterable","totalCount","results","params","allItems","start","items","slice","pageCount","count","ceil","currentPage","hasPreviousPage","hasNextPage","map","item","i","arr","next","previous","nodes","pageInfo","itemCount","perPage","link","options","by","fieldConfig","linkResolver","resolver","resolve","defaultFieldResolver","fieldValueOrPromise","fromNode","then","linkResolverValue","returnType","getNullableType","getNamedType","getNodesByIds","ids","getNodeById","id","runQueryArgs","split","reduceRight","obj","in","eq","firstOnly","GraphQLList","linkResolverQueryResult","queryResult","find","fileByPath","fileByPathResolver","parentFileNode","findRootNodeAncestor","internal","queryNodesByPath","relPaths","queryNodeByPath","relPath","absolutePath","normalize","systemPath","dir","fieldName","selectionSet","fieldNodes","getFieldNodeByNameInSelectionSet","isObjectType","isInterfaceType","getFields","fieldArg","arg","name","fieldTC","isEnumType","isInputObjectType","fieldNode","arguments","kind","Kind","ENUM","enumKey","enumValue","getValue","OBJECT","sortPath","selections","selection","FRAGMENT_SPREAD","fragmentDef","fragments","INLINE_FRAGMENT","property","WARNED_ABOUT_RESOLVERS","badResolverInvocationMessage","missingVar","resolverName","pathToArray","wrappingResolver","wrappedTracingResolver","parent","reporter","warn","activity","time","createResolverActivity","parentType","telemetryResolverTimings","process","hrtime","bigint","endActivity","duration","end","isTracingResolver","defaultResolver"],"sources":["../../src/schema/resolvers.ts"],"sourcesContent":["import systemPath from \"path\"\nimport normalize from \"normalize-path\"\nimport {\n  GraphQLList,\n  GraphQLType,\n  getNullableType,\n  getNamedType,\n  Kind,\n  GraphQLFieldConfig,\n  GraphQLResolveInfo,\n  isObjectType,\n  isInterfaceType,\n  isEnumType,\n  isInputObjectType,\n  SelectionSetNode,\n  SelectionNode,\n  FieldNode,\n} from \"graphql\"\nimport isPlainObject from \"lodash/isPlainObject\"\nimport { Path } from \"graphql/jsutils/Path\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { pathToArray } from \"../query/utils\"\nimport { getValueAt } from \"../utils/get-value-at\"\nimport {\n  GatsbyResolver,\n  IGatsbyConnection,\n  IGatsbyResolverContext,\n} from \"./type-definitions\"\nimport { IGatsbyNode } from \"../redux/types\"\nimport { IQueryResult } from \"../datastore/types\"\nimport { GatsbyIterable } from \"../datastore/common/iterable\"\nimport { getResolvedFields, fieldPathNeedToResolve } from \"./utils\"\n\ntype ResolvedLink = IGatsbyNode | Array<IGatsbyNode> | null\n\ntype nestedListOfStrings = Array<string | nestedListOfStrings>\ntype nestedListOfNodes = Array<IGatsbyNode | nestedListOfNodes>\n\ntype NestedPathStructure = INestedPathStructureNode | true | \"ASC\" | \"DESC\"\n\ninterface INestedPathStructureNode {\n  [key: string]: NestedPathStructure\n}\n\nfunction pathObjectToPathString(input: INestedPathStructureNode): {\n  path: string\n  leaf: any\n} {\n  const path: Array<string> = []\n  let currentValue: NestedPathStructure | undefined = input\n  let leaf: any = undefined\n  while (currentValue) {\n    if (isPlainObject(currentValue)) {\n      const entries = Object.entries(currentValue)\n      if (entries.length !== 1) {\n        throw new Error(`Invalid field arg`)\n      }\n      for (const [key, value] of entries) {\n        path.push(key)\n        currentValue = value\n      }\n    } else {\n      leaf = currentValue\n      currentValue = undefined\n    }\n  }\n\n  return {\n    path: path.join(`.`),\n    leaf,\n  }\n}\n\nfunction getMaybeResolvedValue(\n  node: IGatsbyNode,\n  field: string | INestedPathStructureNode,\n  nodeInterfaceName: string\n): any {\n  if (typeof field !== `string`) {\n    field = pathObjectToPathString(field).path\n  }\n\n  if (\n    fieldPathNeedToResolve({\n      selector: field,\n      type: nodeInterfaceName,\n    })\n  ) {\n    return getValueAt(getResolvedFields(node) as Record<string, unknown>, field)\n  } else {\n    return getValueAt(node, field)\n  }\n}\n\nexport function findOne<TSource, TArgs>(\n  typeName: string\n): GatsbyResolver<TSource, TArgs> {\n  return function findOneResolver(_source, args, context, info): any {\n    if (context.stats) {\n      context.stats.totalRunQuery++\n    }\n    return context.nodeModel.findOne(\n      {\n        query: { filter: args },\n        type: info.schema.getType(typeName),\n        stats: context.stats,\n        tracer: context.tracer,\n      },\n      { path: context.path }\n    )\n  }\n}\n\ntype PaginatedArgs<TArgs> = TArgs & { skip?: number; limit?: number; sort: any }\n\nfunction maybeConvertSortInputObjectToSortPath<TArgs>(\n  args: PaginatedArgs<TArgs>\n): any {\n  if (!args.sort) {\n    return args\n  }\n\n  if (_CFLAGS_.GATSBY_MAJOR === `5`) {\n    let sorts = args.sort\n    if (!Array.isArray(sorts)) {\n      sorts = [sorts]\n    }\n\n    const modifiedSort: any = {\n      fields: [],\n      order: [],\n    }\n\n    for (const sort of sorts) {\n      const { path, leaf } = pathObjectToPathString(sort)\n      modifiedSort.fields.push(path)\n      modifiedSort.order.push(leaf)\n    }\n\n    return {\n      ...args,\n      sort: modifiedSort,\n    }\n  }\n\n  return args\n}\n\nexport function findManyPaginated<TSource, TArgs>(\n  typeName: string\n): GatsbyResolver<TSource, PaginatedArgs<TArgs>> {\n  return async function findManyPaginatedResolver(\n    _source,\n    args,\n    context,\n    info\n  ): Promise<IGatsbyConnection<IGatsbyNode>> {\n    // Peek into selection set and pass on the `field` arg of `group` and\n    // `distinct` which might need to be resolved.\n    const group = getProjectedField(info, `group`)\n    const distinct = getProjectedField(info, `distinct`)\n    const max = getProjectedField(info, `max`)\n    const min = getProjectedField(info, `min`)\n    const sum = getProjectedField(info, `sum`)\n\n    // Apply paddings for pagination\n    // (for previous/next node and also to detect if there is a previous/next page)\n    const skip = typeof args.skip === `number` ? Math.max(0, args.skip - 1) : 0\n    const limit = typeof args.limit === `number` ? args.limit + 2 : undefined\n\n    const extendedArgs = {\n      ...maybeConvertSortInputObjectToSortPath(args),\n      group: group || [],\n      distinct: distinct || [],\n      max: max || [],\n      min: min || [],\n      sum: sum || [],\n      skip,\n      limit,\n    }\n    // Note: stats are passed to telemetry in src/commands/build.ts\n    if (context.stats) {\n      context.stats.totalRunQuery++\n      context.stats.totalPluralRunQuery++\n    }\n    const result = await context.nodeModel.findAll(\n      {\n        query: extendedArgs,\n        type: info.schema.getType(typeName),\n        stats: context.stats,\n        tracer: context.tracer,\n      },\n      { path: context.path, connectionType: typeName }\n    )\n    return paginate(result, {\n      resultOffset: skip,\n      skip: args.skip,\n      limit: args.limit,\n    })\n  }\n}\n\ninterface IFieldConnectionArgs {\n  field: string | INestedPathStructureNode\n}\n\nexport function createDistinctResolver(\n  nodeInterfaceName: string\n): GatsbyResolver<IGatsbyConnection<IGatsbyNode>, IFieldConnectionArgs> {\n  return function distinctResolver(source, args): Array<string> {\n    const { field } = args\n    const { edges } = source\n\n    const values = new Set<string>()\n    edges.forEach(({ node }) => {\n      const value = getMaybeResolvedValue(node, field, nodeInterfaceName)\n      if (value === null || value === undefined) {\n        return\n      }\n      if (Array.isArray(value)) {\n        value.forEach(subValue =>\n          values.add(\n            subValue instanceof Date ? subValue.toISOString() : subValue\n          )\n        )\n      } else if (value instanceof Date) {\n        values.add(value.toISOString())\n      } else {\n        values.add(value)\n      }\n    })\n    return Array.from(values).sort()\n  }\n}\n\nexport function createMinResolver(\n  nodeInterfaceName: string\n): GatsbyResolver<IGatsbyConnection<IGatsbyNode>, IFieldConnectionArgs> {\n  return function minResolver(source, args): number | null {\n    const { field } = args\n    const { edges } = source\n\n    let min = Number.MAX_SAFE_INTEGER\n\n    edges.forEach(({ node }) => {\n      let value = getMaybeResolvedValue(node, field, nodeInterfaceName)\n\n      if (typeof value !== `number`) {\n        value = Number(value)\n      }\n      if (!isNaN(value) && value < min) {\n        min = value\n      }\n    })\n    if (min === Number.MAX_SAFE_INTEGER) {\n      return null\n    }\n    return min\n  }\n}\n\nexport function createMaxResolver(\n  nodeInterfaceName: string\n): GatsbyResolver<IGatsbyConnection<IGatsbyNode>, IFieldConnectionArgs> {\n  return function maxResolver(source, args): number | null {\n    const { field } = args\n    const { edges } = source\n\n    let max = Number.MIN_SAFE_INTEGER\n\n    edges.forEach(({ node }) => {\n      let value = getMaybeResolvedValue(node, field, nodeInterfaceName)\n      if (typeof value !== `number`) {\n        value = Number(value)\n      }\n      if (!isNaN(value) && value > max) {\n        max = value\n      }\n    })\n    if (max === Number.MIN_SAFE_INTEGER) {\n      return null\n    }\n    return max\n  }\n}\n\nexport function createSumResolver(\n  nodeInterfaceName: string\n): GatsbyResolver<IGatsbyConnection<IGatsbyNode>, IFieldConnectionArgs> {\n  return function sumResolver(source, args): number | null {\n    const { field } = args\n    const { edges } = source\n\n    return edges.reduce<number | null>((prev, { node }) => {\n      let value = getMaybeResolvedValue(node, field, nodeInterfaceName)\n\n      if (typeof value !== `number`) {\n        value = Number(value)\n      }\n      if (!isNaN(value)) {\n        return (prev || 0) + value\n      }\n      return prev\n    }, null)\n  }\n}\n\ntype IGatsbyGroupReturnValue<NodeType> = Array<\n  IGatsbyConnection<NodeType> & {\n    field: string\n    fieldValue: string | undefined\n  }\n>\n\nexport function createGroupResolver(\n  nodeInterfaceName: string\n): GatsbyResolver<\n  IGatsbyConnection<IGatsbyNode>,\n  PaginatedArgs<IFieldConnectionArgs>\n> {\n  return function groupResolver(\n    source,\n    args\n  ): IGatsbyGroupReturnValue<IGatsbyNode> {\n    const { field } = args\n    const { edges } = source\n    const groupedResults: Record<string, Array<IGatsbyNode>> = edges.reduce(\n      (acc, { node }) => {\n        const value = getMaybeResolvedValue(node, field, nodeInterfaceName)\n        const values = Array.isArray(value) ? value : [value]\n        values\n          .filter(value => value != null)\n          .forEach(value => {\n            const key = value instanceof Date ? value.toISOString() : value\n            acc[key] = (acc[key] || []).concat(node)\n          })\n        return acc\n        // Note: using Object.create on purpose:\n        //   object key may be arbitrary string including reserved words (i.e. `constructor`)\n        //   see: https://github.com/gatsbyjs/gatsby/issues/22508\n      },\n      Object.create(null)\n    )\n\n    return Object.keys(groupedResults)\n      .sort()\n      .reduce(\n        (acc: IGatsbyGroupReturnValue<IGatsbyNode>, fieldValue: string) => {\n          const entries = groupedResults[fieldValue] || []\n          acc.push({\n            ...paginate(\n              {\n                entries: new GatsbyIterable(entries),\n                totalCount: async () => entries.length,\n              },\n              args\n            ),\n            field:\n              typeof field === `string`\n                ? field\n                : pathObjectToPathString(field).path,\n            fieldValue,\n          })\n          return acc\n        },\n        []\n      )\n  }\n}\n\nexport function paginate(\n  results: IQueryResult,\n  params: { skip?: number; limit?: number; resultOffset?: number }\n): IGatsbyConnection<IGatsbyNode> {\n  const { resultOffset = 0, skip = 0, limit } = params\n  if (resultOffset > skip) {\n    throw new Error(\"Result offset cannot be greater than `skip` argument\")\n  }\n  const allItems = Array.from(results.entries)\n\n  const start = skip - resultOffset\n  const items = allItems.slice(start, limit && start + limit)\n\n  const totalCount = results.totalCount\n  const pageCount = async (): Promise<number> => {\n    const count = await totalCount()\n    return limit\n      ? Math.ceil(skip / limit) + Math.ceil((count - skip) / limit)\n      : skip\n      ? 2\n      : 1\n  }\n  const currentPage = limit ? Math.ceil(skip / limit) + 1 : skip ? 2 : 1\n  const hasPreviousPage = currentPage > 1\n  const hasNextPage = limit ? allItems.length - start > limit : false\n\n  return {\n    totalCount,\n    edges: items.map((item, i, arr) => {\n      return {\n        node: item,\n        next: arr[i + 1],\n        previous: arr[i - 1],\n      }\n    }),\n    nodes: items,\n    pageInfo: {\n      currentPage,\n      hasPreviousPage,\n      hasNextPage,\n      itemCount: items.length,\n      pageCount,\n      perPage: limit,\n      totalCount,\n    },\n  }\n}\n\nexport function link<TSource, TArgs>(\n  options: {\n    by: string\n    type?: GraphQLType\n    from?: string\n    fromNode?: boolean\n  } = {\n    by: `id`,\n  },\n  fieldConfig: GraphQLFieldConfig<\n    TSource,\n    IGatsbyResolverContext<TSource, TArgs>,\n    TArgs\n  >\n): GatsbyResolver<TSource, TArgs> {\n  // Note: we explicitly make an attempt to prevent using the `async` keyword because often\n  //       it does not return a promise and this makes a significant difference at scale.\n\n  return function linkResolver(\n    source,\n    args,\n    context,\n    info\n  ): ResolvedLink | Promise<ResolvedLink> {\n    const resolver = fieldConfig.resolve || context.defaultFieldResolver\n    const fieldValueOrPromise = resolver(source, args, context, {\n      ...info,\n      from: options.from || info.from,\n      fromNode: options.from ? options.fromNode : info.fromNode,\n    })\n\n    // Note: for this function, at scale, conditional .then is more efficient than generic await\n    if (typeof fieldValueOrPromise?.then === `function`) {\n      return fieldValueOrPromise.then(fieldValue =>\n        linkResolverValue(fieldValue, args, context, info)\n      )\n    }\n\n    return linkResolverValue(fieldValueOrPromise, args, context, info)\n  }\n\n  function linkResolverValue(\n    fieldValue,\n    args,\n    context,\n    info\n  ): ResolvedLink | Promise<ResolvedLink> {\n    if (fieldValue == null) {\n      return null\n    }\n\n    const returnType = getNullableType(options.type || info.returnType)\n    const type = getNamedType(returnType)\n\n    if (options.by === `id`) {\n      if (Array.isArray(fieldValue)) {\n        return context.nodeModel.getNodesByIds(\n          { ids: fieldValue, type: type },\n          { path: context.path }\n        )\n      } else {\n        return context.nodeModel.getNodeById(\n          { id: fieldValue, type: type },\n          { path: context.path }\n        )\n      }\n    }\n\n    // Return early if fieldValue is [] since { in: [] } doesn't make sense\n    if (Array.isArray(fieldValue) && fieldValue.length === 0) {\n      return fieldValue\n    }\n\n    const runQueryArgs = args as TArgs & { filter: Record<string, any> }\n    runQueryArgs.filter = options.by.split(`.`).reduceRight(\n      (acc: Record<string, any>, key: string) => {\n        const obj = {}\n        obj[key] = acc\n        return obj\n      },\n      Array.isArray(fieldValue) ? { in: fieldValue } : { eq: fieldValue }\n    )\n\n    const firstOnly = !(returnType instanceof GraphQLList)\n\n    if (context.stats) {\n      context.stats.totalRunQuery++\n      if (firstOnly) {\n        context.stats.totalPluralRunQuery++\n      }\n    }\n\n    if (firstOnly) {\n      return context.nodeModel\n        .findOne(\n          {\n            query: runQueryArgs,\n            type,\n            stats: context.stats,\n            tracer: context.tracer,\n          },\n          { path: context.path }\n        )\n        .then(result => linkResolverQueryResult(fieldValue, result, returnType))\n    }\n\n    return context.nodeModel\n      .findAll(\n        {\n          query: runQueryArgs,\n          type,\n          stats: context.stats,\n          tracer: context.tracer,\n        },\n        { path: context.path }\n      )\n      .then(({ entries }) =>\n        linkResolverQueryResult(fieldValue, Array.from(entries), returnType)\n      )\n  }\n\n  function linkResolverQueryResult(\n    fieldValue,\n    queryResult,\n    returnType\n  ): IGatsbyNode | Array<IGatsbyNode> {\n    if (\n      returnType instanceof GraphQLList &&\n      Array.isArray(fieldValue) &&\n      Array.isArray(queryResult)\n    ) {\n      return fieldValue.map(value =>\n        queryResult.find(obj => getValueAt(obj, options.by) === value)\n      )\n    } else {\n      return queryResult\n    }\n  }\n}\n\nexport function fileByPath<TSource, TArgs>(\n  options: {\n    from?: string\n    fromNode?: boolean\n  } = {},\n  fieldConfig\n): GatsbyResolver<TSource, TArgs> {\n  return async function fileByPathResolver(\n    source,\n    args,\n    context,\n    info\n  ): Promise<IGatsbyNode | nestedListOfNodes | null> {\n    const resolver = fieldConfig.resolve || context.defaultFieldResolver\n    const fieldValue: nestedListOfStrings = await resolver(\n      source,\n      args,\n      context,\n      {\n        ...info,\n        from: options.from || info.from,\n        fromNode: options.from ? options.fromNode : info.fromNode,\n      }\n    )\n\n    if (fieldValue == null) {\n      return null\n    }\n\n    // Find the File node for this node (we assume the node is something\n    // like markdown which would be a child node of a File node).\n    const parentFileNode = context.nodeModel.findRootNodeAncestor(\n      source,\n      node => node.internal && node.internal.type === `File`\n    )\n\n    async function queryNodesByPath(\n      relPaths: nestedListOfStrings\n    ): Promise<nestedListOfNodes> {\n      const arr: nestedListOfNodes = []\n      for (let i = 0; i < relPaths.length; ++i) {\n        arr[i] = await (Array.isArray(relPaths[i])\n          ? queryNodesByPath(relPaths[i] as nestedListOfStrings)\n          : queryNodeByPath(relPaths[i] as string))\n      }\n      return arr\n    }\n\n    function queryNodeByPath(relPath: string): Promise<IGatsbyNode> {\n      return context.nodeModel.findOne({\n        query: {\n          filter: {\n            absolutePath: {\n              eq: normalize(systemPath.resolve(parentFileNode.dir, relPath)),\n            },\n          },\n        },\n        type: `File`,\n      })\n    }\n\n    if (Array.isArray(fieldValue)) {\n      return queryNodesByPath(fieldValue)\n    } else {\n      return queryNodeByPath(fieldValue)\n    }\n  }\n}\n\nfunction getProjectedField(\n  info: GraphQLResolveInfo,\n  fieldName: string\n): Array<string> {\n  const selectionSet = info.fieldNodes[0].selectionSet\n  if (selectionSet) {\n    const fieldNodes = getFieldNodeByNameInSelectionSet(\n      selectionSet,\n      fieldName,\n      info\n    )\n\n    if (fieldNodes.length === 0) {\n      return []\n    }\n\n    const returnType = getNullableType(info.returnType)\n\n    if (isObjectType(returnType) || isInterfaceType(returnType)) {\n      const field = returnType.getFields()[fieldName]\n      const fieldArg = field?.args?.find(arg => arg.name === `field`)\n      if (fieldArg) {\n        const fieldTC = getNullableType(fieldArg.type)\n\n        if (isEnumType(fieldTC) || isInputObjectType(fieldTC)) {\n          return fieldNodes.reduce(\n            (acc: Array<string>, fieldNode: FieldNode) => {\n              const fieldArg = fieldNode.arguments?.find(\n                arg => arg.name.value === `field`\n              )\n              if (isEnumType(fieldTC)) {\n                if (fieldArg?.value.kind === Kind.ENUM) {\n                  const enumKey = fieldArg.value.value\n                  const enumValue = fieldTC.getValue(enumKey)\n                  if (enumValue) {\n                    acc.push(enumValue.value)\n                  }\n                }\n              } else if (isInputObjectType(fieldTC)) {\n                const path: Array<string> = []\n                let currentValue = fieldArg?.value\n                while (currentValue) {\n                  if (currentValue.kind === Kind.OBJECT) {\n                    if (currentValue.fields.length !== 1) {\n                      throw new Error(`Invalid field arg`)\n                    }\n\n                    const fieldArg = currentValue.fields[0]\n                    path.push(fieldArg.name.value)\n                    currentValue = fieldArg.value\n                  } else {\n                    currentValue = undefined\n                  }\n                }\n\n                if (path.length > 0) {\n                  const sortPath = path.join(`.`)\n                  acc.push(sortPath)\n                }\n              }\n              return acc\n            },\n            []\n          )\n        }\n      }\n    }\n  }\n\n  return []\n}\n\nfunction getFieldNodeByNameInSelectionSet(\n  selectionSet: SelectionSetNode,\n  fieldName: string,\n  info: GraphQLResolveInfo\n): Array<FieldNode> {\n  return selectionSet.selections.reduce(\n    (acc: Array<FieldNode>, selection: SelectionNode) => {\n      if (selection.kind === Kind.FRAGMENT_SPREAD) {\n        const fragmentDef = info.fragments[selection.name.value]\n        if (fragmentDef) {\n          return [\n            ...acc,\n            ...getFieldNodeByNameInSelectionSet(\n              fragmentDef.selectionSet,\n              fieldName,\n              info\n            ),\n          ]\n        }\n      } else if (selection.kind === Kind.INLINE_FRAGMENT) {\n        return [\n          ...acc,\n          ...getFieldNodeByNameInSelectionSet(\n            selection.selectionSet,\n            fieldName,\n            info\n          ),\n        ]\n      } /* FIELD_NODE */ else {\n        if (selection.name.value === fieldName) {\n          return [...acc, selection]\n        }\n      }\n      return acc\n    },\n    []\n  )\n}\n\nexport const defaultFieldResolver: GatsbyResolver<any, any> =\n  function defaultFieldResolver(source, args, context, info) {\n    if (\n      (typeof source == `object` && source !== null) ||\n      typeof source === `function`\n    ) {\n      if (info.from) {\n        if (info.fromNode) {\n          const node = context.nodeModel.findRootNodeAncestor(source)\n          if (!node) return null\n          return getValueAt(node, info.from)\n        }\n        return getValueAt(source, info.from)\n      }\n      const property = source[info.fieldName]\n      if (typeof property === `function`) {\n        return source[info.fieldName](args, context, info)\n      }\n      return property\n    }\n\n    return null\n  }\n\nlet WARNED_ABOUT_RESOLVERS = false\nfunction badResolverInvocationMessage(missingVar: string, path?: Path): string {\n  const resolverName = path ? `${pathToArray(path)} ` : ``\n  return `GraphQL Resolver ${resolverName}got called without \"${missingVar}\" argument. This might cause unexpected errors.\n\nIt's likely that this has happened in a schemaCustomization with manually invoked resolver. If manually invoking resolvers, it's best to invoke them as follows:\n\n  resolve(parent, args, context, info)\n\n`\n}\n\nexport function wrappingResolver<TSource, TArgs>(\n  resolver: GatsbyResolver<TSource, TArgs>\n): GatsbyResolver<TSource, TArgs> {\n  // Note: we explicitly make an attempt to prevent using the `async` keyword because often\n  //       it does not return a promise and this makes a significant difference at scale.\n  //       GraphQL will gracefully handle the resolver result of a promise or non-promise.\n\n  if (resolver[`isTracingResolver`]) {\n    return resolver\n  }\n\n  const wrappedTracingResolver = function wrappedTracingResolver(\n    parent,\n    args,\n    context,\n    info\n  ): Promise<any> {\n    if (!WARNED_ABOUT_RESOLVERS) {\n      if (!info) {\n        reporter.warn(badResolverInvocationMessage(`info`))\n        WARNED_ABOUT_RESOLVERS = true\n      } else if (!context) {\n        reporter.warn(badResolverInvocationMessage(`context`, info.path))\n        WARNED_ABOUT_RESOLVERS = true\n      }\n    }\n\n    let activity\n    let time\n    if (context?.tracer) {\n      activity = context.tracer.createResolverActivity(\n        info.path,\n        `${info.parentType.name}.${info.fieldName}`\n      )\n      activity.start()\n    }\n    if (context?.telemetryResolverTimings) {\n      time = process.hrtime.bigint()\n    }\n\n    const result = resolver(parent, args, context, info)\n\n    if (!activity && !time) {\n      return result\n    }\n\n    const endActivity = (): void => {\n      if (context?.telemetryResolverTimings) {\n        context.telemetryResolverTimings.push({\n          name: `${info.parentType}.${info.fieldName}`,\n          duration: Number(process.hrtime.bigint() - time) / 1000 / 1000,\n        })\n      }\n      if (activity) {\n        activity.end()\n      }\n    }\n    if (typeof result?.then === `function`) {\n      result.then(endActivity, endActivity)\n    } else {\n      endActivity()\n    }\n    return result\n  }\n\n  wrappedTracingResolver.isTracingResolver = true\n\n  return wrappedTracingResolver\n}\n\nexport const defaultResolver = wrappingResolver(defaultFieldResolver)\n"],"mappings":"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"}