{"version":3,"file":"sanitize-node.js","names":["omitUndefined","data","isPlainObject","p","undefined","filter","isTypeSupported","type","isSupported","Date","sanitizeNode","isNode","path","Set","has","add","returnData","anyFieldChanged","o","key"],"sources":["../../src/utils/sanitize-node.ts"],"sourcesContent":["import _ from \"lodash\"\n\nimport type { IGatsbyNode } from \"../redux/types\"\nimport type { GatsbyIterable } from \"../datastore/common/iterable\"\n\ntype data = IGatsbyNode | GatsbyIterable<IGatsbyNode>\n\n/**\n * @param {Object|Array} data\n * @returns {Object|Array} data without undefined values\n */\ntype omitUndefined = (data: data) => Partial<data>\n\nconst omitUndefined: omitUndefined = data => {\n  const isPlainObject = _.isPlainObject(data)\n  if (isPlainObject) {\n    return _.pickBy(data, p => p !== undefined)\n  }\n\n  return (data as GatsbyIterable<IGatsbyNode>).filter(p => p !== undefined)\n}\n\n/**\n * @param {*} data\n * @return {boolean}\n */\ntype isTypeSupported = (data: data) => boolean\n\nconst isTypeSupported: isTypeSupported = data => {\n  if (data === null) {\n    return true\n  }\n\n  const type = typeof data\n  const isSupported =\n    type === `number` ||\n    type === `string` ||\n    type === `boolean` ||\n    data instanceof Date\n\n  return isSupported\n}\n\n/**\n * Make data serializable\n * @param {(Object|Array)} data to sanitize\n * @param {boolean} isNode = true\n * @param {Set<string>} path = new Set\n */\n\ntype sanitizeNode = (\n  data: data,\n  isNode?: boolean,\n  path?: Set<unknown>\n) => data | undefined\n\nconst sanitizeNode: sanitizeNode = (data, isNode = true, path = new Set()) => {\n  const isPlainObject = _.isPlainObject(data)\n\n  if (isPlainObject || _.isArray(data)) {\n    if (path.has(data)) return data\n    path.add(data)\n\n    const returnData = isPlainObject ? {} : []\n    let anyFieldChanged = false\n    _.each(data, (o, key) => {\n      if (isNode && key === `internal`) {\n        returnData[key] = o\n        return\n      }\n      returnData[key] = sanitizeNode(o as data, false, path)\n\n      if (returnData[key] !== o) {\n        anyFieldChanged = true\n      }\n    })\n\n    if (anyFieldChanged) {\n      data = omitUndefined(returnData as data) as data\n    }\n\n    // arrays and plain objects are supported - no need to to sanitize\n    return data\n  }\n\n  if (!isTypeSupported(data)) {\n    return undefined\n  } else {\n    return data\n  }\n}\n\nexport default sanitizeNode\n"],"mappings":";;;;;;;;;;;;;;;AAaA,MAAMA,aAA4B,GAAGC,IAAI,IAAI;EAC3C,MAAMC,aAAa,GAAG,6BAAgBD,IAAhB,CAAtB;;EACA,IAAIC,aAAJ,EAAmB;IACjB,OAAO,sBAASD,IAAT,EAAeE,CAAC,IAAIA,CAAC,KAAKC,SAA1B,CAAP;EACD;;EAED,OAAQH,IAAD,CAAsCI,MAAtC,CAA6CF,CAAC,IAAIA,CAAC,KAAKC,SAAxD,CAAP;AACD,CAPD;AASA;AACA;AACA;AACA;;;AAGA,MAAME,eAAgC,GAAGL,IAAI,IAAI;EAC/C,IAAIA,IAAI,KAAK,IAAb,EAAmB;IACjB,OAAO,IAAP;EACD;;EAED,MAAMM,IAAI,GAAG,OAAON,IAApB;EACA,MAAMO,WAAW,GACfD,IAAI,KAAM,QAAV,IACAA,IAAI,KAAM,QADV,IAEAA,IAAI,KAAM,SAFV,IAGAN,IAAI,YAAYQ,IAJlB;EAMA,OAAOD,WAAP;AACD,CAbD;AAeA;AACA;AACA;AACA;AACA;AACA;;;AAQA,MAAME,YAA0B,GAAG,CAACT,IAAD,EAAOU,MAAM,GAAG,IAAhB,EAAsBC,IAAI,GAAG,IAAIC,GAAJ,EAA7B,KAA2C;EAC5E,MAAMX,aAAa,GAAG,6BAAgBD,IAAhB,CAAtB;;EAEA,IAAIC,aAAa,IAAI,uBAAUD,IAAV,CAArB,EAAsC;IACpC,IAAIW,IAAI,CAACE,GAAL,CAASb,IAAT,CAAJ,EAAoB,OAAOA,IAAP;IACpBW,IAAI,CAACG,GAAL,CAASd,IAAT;IAEA,MAAMe,UAAU,GAAGd,aAAa,GAAG,EAAH,GAAQ,EAAxC;IACA,IAAIe,eAAe,GAAG,KAAtB;IACA,oBAAOhB,IAAP,EAAa,CAACiB,CAAD,EAAIC,GAAJ,KAAY;MACvB,IAAIR,MAAM,IAAIQ,GAAG,KAAM,UAAvB,EAAkC;QAChCH,UAAU,CAACG,GAAD,CAAV,GAAkBD,CAAlB;QACA;MACD;;MACDF,UAAU,CAACG,GAAD,CAAV,GAAkBT,YAAY,CAACQ,CAAD,EAAY,KAAZ,EAAmBN,IAAnB,CAA9B;;MAEA,IAAII,UAAU,CAACG,GAAD,CAAV,KAAoBD,CAAxB,EAA2B;QACzBD,eAAe,GAAG,IAAlB;MACD;IACF,CAVD;;IAYA,IAAIA,eAAJ,EAAqB;MACnBhB,IAAI,GAAGD,aAAa,CAACgB,UAAD,CAApB;IACD,CApBmC,CAsBpC;;;IACA,OAAOf,IAAP;EACD;;EAED,IAAI,CAACK,eAAe,CAACL,IAAD,CAApB,EAA4B;IAC1B,OAAOG,SAAP;EACD,CAFD,MAEO;IACL,OAAOH,IAAP;EACD;AACF,CAlCD;;eAoCeS,Y"}