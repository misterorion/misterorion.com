steps:
  - id: Fetch cache
    name: gcr.io/cloud-builders/gcloud
    entrypoint: bash
    args:
      - -c
      - |
        (
          set -e
          gsutil -q hash -h yarn.lock | grep md5 | tr -s " " | awk '{print $3}' > hashed.yarn-lock
          echo "Attempting to use cache from: gs://$_CACHE_BUCKET/$(cat hashed.yarn-lock)"
          gsutil -q -m cp "gs://$_CACHE_BUCKET/$(cat hashed.yarn-lock)" cache.tar.gz 2> /dev/null
          test -f cache.tar.gz
          tar -zxf cache.tar.gz
        ) || true
  - id: Yarn build
    name: $_NODE_IMAGE
    entrypoint: sh
    args:
      - -c
      - |
        test -f cache.tar.gz || yarn install --immutable
        yarn build
    env:
      - GATSBY_TELEMETRY_DISABLED=true
      - GATSBY_BASIC_AUTH=${_GATSBY_BASIC_AUTH}
  - id: Precompress files
    name: gcr.io/cloud-builders/gcloud
    entrypoint: bash
    args:
      - -c
      - |
        gsutil -q -m cp $_BROTLI_BIN brotli.tar.gz && tar -zxf brotli.tar.gz
        cp -R ./public ./srv
        find ./srv -type f -size +1400c \
          -regex ".*\.\(css\|html\|js\|json\|svg\|xml\)$" \
          -exec ./brotli --best {} \+ \
          -exec gzip --best -k {} \+
  - id: Caddy fmt
    name: gcr.io/cloud-builders/gcloud
    entrypoint: sh
    args:
      - -c
      - |
        gsutil -q -m cp $_CADDY_BIN caddy.tar.gz && tar -zxf caddy.tar.gz
        ./caddy fmt --overwrite
  - id: Build and push image
    name: gcr.io/cloud-builders/docker
    entrypoint: bash
    args:
      - -c
      - |
        docker build --build-arg CADDY_IMAGE=$_CADDY_IMAGE -t $_APP_IMAGE:$SHORT_SHA .
        docker push $_APP_IMAGE:$SHORT_SHA
  - id: Push manifest
    name: gcr.io/cloud-builders/gcloud
    entrypoint: bash
    args:
      - -c
      - |
        mkdir -p /root/.ssh
        echo "$$SECRET_KEY" >> /root/.ssh/id_ed25519 && chmod 400 /root/.ssh/id_ed25519
        ssh-keyscan -p 2022 source.developers.google.com > /root/.ssh/known_hosts
        AUTHOR_NAME=$$(git log -1 --pretty=format:"%an")
        AUTHOR_EMAIL=$$(git log -1 --pretty=format:"%ae")
        LAST_COMMIT_MESSAGE=$$(git log --format=%B -n 1 $SHORT_SHA)
        git clone $_CONFIG_REPO tmp && cd tmp && \
        gsutil -q -m cp $_HELM_BIN helm.tar.gz && tar -zxf helm.tar.gz && \
        ./helm template --set shortSHA=$SHORT_SHA app \
            -f app/values-dev.yaml > state/dev/state.yaml && \
        ./helm template --set shortSHA=$SHORT_SHA app \
            -f app/values-prod.yaml > state/prod/state.yaml && \
        git add state/dev.yaml state/prod.yaml && \
        git config user.name "$$AUTHOR_NAME" && \
        git config user.email "$$AUTHOR_EMAIL" && \
        git commit -m "$$LAST_COMMIT_MESSAGE" && \
        git push origin master || true
    secretEnv:
      - SECRET_KEY
  - id: Push cache
    name: gcr.io/cloud-builders/gcloud
    entrypoint: bash
    args:
      - -c
      - |
        tar -zcf cache.tar.gz .yarn/unplugged .cache public
        gsutil -q -m cp cache.tar.gz "gs://$_CACHE_BUCKET/$(cat hashed.yarn-lock)"
    waitFor:
      - Yarn build
availableSecrets:
  secretManager:
    - versionName: projects/$_PROJECT/secrets/$_SECRET_KEY/versions/latest
      env: SECRET_KEY
